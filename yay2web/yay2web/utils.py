from django.http import HttpRequest
from studio.models import Configuration, SourceAlsa, SinkIcecast, SourceFallback, SourceFallbackSource
from time import asctime
import re
import os

# simple string to filename converter
# just replace everything that is not alphanum
# with underscore
# WARNING: duplicates guarenteed

def string_to_filename(s):
    return re.sub('[^a-zA-Z0-9]', '_', s)
    

def context_processor(HttpRequest):
    rv = {}

    config = Configuration.objects.get()

    rv['station_name'] = config.station_name

    return rv

def generate_liquidsoap_config():
    config = Configuration.objects.get()

    # output boiler-plate
    rv  = '''#
# liquidsoap configuration for {0}
# autogenerated by yay2 at {1}
#
# do not modify, changes may be overwriten
#

set("log.file.path","{2}.log")
set("server.telnet.port",1236)
set("server.telnet",true)
set("init.daemon",true)
set("init.daemon.pidfile",true)
set("init.daemon.pidfile.path","{3}.pid")

# as a last-resort fallback, emit a 440hz continuous tone
sine = sine()

'''.format(
    config.station_name,
    config.telnet_port,
    os.path.join(config.log_path, string_to_filename(config.station_name)),
    os.path.join(config.cmd_path, string_to_filename(config.station_name)),
    )

    # output alsa sources
    sources = SourceAlsa.objects.all()

    for source in sources:
        if source.strip_blank!=None:
            rv += "{0} = strip_blank(max_blank={1},input.alsa(device=\"{2}\"))\n".format(string_to_filename(source.name), source.strip_blank, source.alsa_device)
        else:
            rv += "{0} = input.alsa(device=\"{1}\"))\n".format(string_to_filename(source.name), source.alsa_device)

    # output fallback sources
    sources = SourceFallback.objects.all()

    for source in sources:
            # broadcast = fallback(track_sensitive=false, [line, backup_stream, security]) 
        track_sensitive = "false"
        if source.track_sensitive:
            track_sensitive = "true"
        rv += "\n" + string_to_filename(source.name) + " = "
        rv += "fallback(track_sensitive={0}, [".format(track_sensitive)
        fallback_sources = SourceFallbackSource.objects.all().order_by('order')
        fb_sources = []
        for fallback_source in fallback_sources:
            fb_sources += [ fallback_source.name ]
        rv += ", ".join(fb_sources)
        rv += "])\n"


    sinks = SinkIcecast.objects.all()

    for sink in sinks:
        rv += '''
output.icecast(%{0},
    host="{1}", port={2}, user="{3}",
    password="{4}", mount="{5}",
    url="{6}",
    description="{7}",
    {8})

'''.format(
    "vorbis",
    sink.server,
    sink.port,
    sink.username,
    sink.password,
    sink.mount,
    "http://www.sonologic.nl/",
    sink.name,
    sink.source)
        
    return rv    
